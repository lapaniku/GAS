# This program was generated by "Generative Art Synthesizer" 
# Generation date: 2021-11-28 09:21:40 UTC 
# GAS change date: 2021-11-28 09:20:21 UTC 
# GAS md5 hash: ad55481e87ca5a7e9a8e92cd336d1cad 
# Python version: 3.7.9 (tags/v3.7.9:13c94747c7, Aug 17 2020, 18:58:18) [MSC v.1900 64 bit (AMD64)] 
# For more information visit: https://github.com/volotat/GAS

#import python libraries 
import numpy as np #Numpy version: 1.19.5 
import os #OS version: default  
from PIL import Image #PIL version: 8.1.2 

#set initial params
SIZE = 768 
GRID_CHANNELS = 16 

def test_values(arr):
    if np.isnan(arr).any():
        raise Exception('Array has None elements!') 
        
    if np.amin(arr) < -1 or np.amax(arr) > 1:
        raise Exception('Values went to far! [ %.2f : %.2f ]'%(np.amin(arr), np.amax(arr)) ) 
           
    return arr

#define grid transformation methods

def transit(x, t_indx, s_indx, alphas):
    res = x.copy()
    res[:,:,t_indx] = np.sum(x[:,:,s_indx] * alphas, axis = -1)
    return test_values(res.clip(-1,1)) 

def sin(x, t_indx, s_indx, scale = 1, shift = 0): 
    res = x.copy()
    res[:,:,t_indx] = np.sin(x[:,:,s_indx] * 0.5 * np.pi * scale + shift)
    return test_values(res)     

def magnitude(x, t_indx, s_indx, ord = 2): 
    res = x.copy()
    res[:,:,t_indx] = np.linalg.norm(x[:,:,s_indx], axis = -1, ord = ord) / np.sqrt(len(s_indx))
    return test_values(res)   

def shift(x, t_indx, s_indx, shift):
    res = x.copy()
    if shift > 0: res[:,:,t_indx] = (-np.abs(((x[:,:,s_indx] + 1) / 2) ** (1 + shift) - 1) ** (1 / (1 + shift)) + 1) * 2 - 1
    if shift < 0: res[:,:,t_indx] = np.abs((1 - (x[:,:,s_indx] + 1) / 2) ** (1 - shift) - 1) ** (1 / (1 - shift)) * 2 - 1  
    return test_values(res) 

def inverse(x, t_indx, s_indx): 
    res = x.copy()
    res[:,:,t_indx] = -x[:,:,s_indx] 
    return test_values(res)   

def smooth_max(x, t_indx, s1_indx, s2_indx, p = 10): 
    res = x.copy()
    res[:,:,t_indx] = np.log((np.exp(x[:,:,s1_indx] * p) + np.exp(x[:,:,s2_indx] * p)) ** (1/p)) / 1.07
    return test_values(res)   

def smooth_min(x, t_indx, s1_indx, s2_indx, p = 10): 
    res = x.copy()
    res[:,:,t_indx] = -np.log((np.exp(-x[:,:,s1_indx] * p) + np.exp(-x[:,:,s2_indx] * p)) ** (1/p)) / 1.07
    return test_values(res)   

def prod(x, t_indx, s_indx):
    res = x.copy()
    res[:,:,t_indx] = np.prod(x[:,:,s_indx], -1)
    return test_values(res) 

def power(x, t_indx, s_indx, p = 1): 
    res = x.copy()
    res[:,:,t_indx] = np.sign(x[:,:,s_indx]) * np.abs(x[:,:,s_indx]) ** p 
    return test_values(res)   

#set initial grid
grid = np.zeros((SIZE, SIZE, GRID_CHANNELS))

x = ((np.arange(SIZE)/(SIZE-1) - 0.5) * 2).reshape((1, SIZE)).repeat(SIZE, 0)
y = ((np.arange(SIZE)/(SIZE-1) - 0.5) * 2).reshape((SIZE, 1)).repeat(SIZE, 1)

grid[:,:,0] = (x * -0.804494034555918 + y * -0.7713127749846067) / 2 
grid[:,:,1] = (x * 0.8546131056912982 + y * -0.5181626052928658) / 2 
grid[:,:,2] = (x * 0.08113550489677235 + y * -0.7425956892534649) / 2 
grid[:,:,3] = (x * -0.983886726570967 + y * 0.7881487907666291) / 2 
grid[:,:,4] = (x * 0.992607408490457 + y * -0.5388791681568157) / 2 
grid[:,:,5] = (x * -0.5191284100463418 + y * 0.053419810278731106) / 2 
grid[:,:,6] = (x * -0.5126335741584209 + y * 0.5429722036766274) / 2 
grid[:,:,7] = (x * 0.1755163303198619 + y * 0.07240814350196234) / 2 
grid[:,:,8] = (x * -0.0043555257380114565 + y * -0.9920551979196799) / 2 
grid[:,:,9] = (x * -0.38436576308855286 + y * -0.11089423936717213) / 2 
grid[:,:,10] = (x * 0.9221154582658591 + y * 0.8979694542805641) / 2 
grid[:,:,11] = (x * -0.35612353730671886 + y * 0.18059949305986223) / 2 
grid[:,:,12] = (x * -0.5482392576708981 + y * -0.8938644075104336) / 2 
grid[:,:,13] = (x * -0.9406946438949866 + y * 0.9920290391761293) / 2 
grid[:,:,14] = (x * -0.8997815489400753 + y * 0.2817133194771111) / 2 
grid[:,:,15] = (x * 0.9602274402822617 + y * 0.16625883302826439) / 2 

#apply transformations to the grid
grid = transit(grid, 13, [8], [1.0])
grid = smooth_min(grid, 0, 13, 2)
grid = sin(grid, 0, 1, 3.2482968305918973, 53.84979498278949)
grid = magnitude(grid, 4, [6, 11, 14, 13, 5, 2, 7, 3, 12], 2)
grid = transit(grid, 13, [4], [1.0])
grid = transit(grid, 8, [7, 1, 13, 8, 15, 14], [0.1663311320128742, 0.05112746724958218, 0.08775348923945508, 0.0019657295977636886, 0.33753890903650896, 0.3552832728638158])
grid = transit(grid, 6, [15, 11, 6, 12, 13, 7, 5, 14], [0.14758114505801948, 0.08144192181822946, 0.12633868888098, 0.12281345148886451, 0.037132543961562674, 0.2024768393935871, 0.24210947048777196, 0.04010593891098492])
grid = transit(grid, 13, [9, 13, 6, 14], [0.09219025566125422, 0.08347011059265387, 0.31183222499775126, 0.5125074087483406])
grid = sin(grid, 3, 15, -0.5204486614349288, -84.56499786115597)
grid = sin(grid, 13, 15, 0.6330677471886501, 21.21197307010381)
grid = transit(grid, 13, [15, 14, 10, 13], [0.12487343915294342, 0.44796857198478746, 0.2782586760974327, 0.14889931276483642])
grid = smooth_min(grid, 6, 4, 9)
grid = smooth_max(grid, 15, 9, 3)
grid = transit(grid, 14, [9, 0, 7, 3, 10], [0.18003513335194174, 0.14430074578557558, 0.05278192595186322, 0.3420095372318055, 0.28087265767881414])
grid = transit(grid, 6, [9, 2], [0.8300092221448799, 0.16999077785512])
grid = transit(grid, 2, [7, 11, 5], [0.5020610904494475, 0.2000649367262514, 0.29787397282430106])
grid = shift(grid, 9, 3, 1.8629741166698146)
grid = sin(grid, 9, 12, 0.4717771305421241, 46.79433508777157)
grid = transit(grid, 6, [5, 1, 3], [0.3308455554710138, 0.004560540434116812, 0.6645939040948694])
grid = transit(grid, 10, [14, 9, 11, 0, 4], [0.1571721076257657, 0.22232953177362882, 0.3439261449563993, 0.14828263571889963, 0.12828957992530649])
grid = transit(grid, 5, [7, 12, 9, 8, 10, 0, 4, 6, 1], [0.15194097979748547, 0.0731663817454797, 0.02428989867658961, 0.024720955392025123, 0.17320282754123556, 0.13074629331998922, 0.18740253645197494, 0.018517981754445516, 0.21601214532077495])
grid = power(grid, 1, 8, 0.0943305761741278)
grid = smooth_min(grid, 6, 15, 11)
grid = transit(grid, 9, [6], [1.0])
grid = shift(grid, 15, 2, 6.924399414306213)
grid = magnitude(grid, 8, [4, 9, 10, 14, 8, 1, 7, 2], 2)
grid = inverse(grid, 5, 2)
grid = sin(grid, 1, 7, -2.4331893396140662, 13.129089247560827)
grid = transit(grid, 2, [2, 12, 3], [0.031953972707128867, 0.45489589946336373, 0.5131501278295074])
grid = sin(grid, 12, 0, 1.653702230061592, 32.0922100966462)
grid = prod(grid, 10, [3, 11])
grid = smooth_min(grid, 6, 10, 10)
grid = transit(grid, 14, [9], [1.0])
grid = magnitude(grid, 2, [6, 4, 13, 9, 11, 1], 2)
grid = transit(grid, 1, [2, 7, 5, 3, 0, 11, 4, 9], [0.16624228335863997, 0.07936608352041907, 0.3513993412818298, 0.021188094622008487, 0.08386192174365024, 0.1282194955272333, 0.12001002397822418, 0.04971275596799479])
grid = sin(grid, 4, 12, 2.544642090871637, -40.39439248709369)
grid = prod(grid, 9, [13, 8])
grid = shift(grid, 8, 5, -5.360670765139654)
grid = sin(grid, 3, 2, -4.454511987713595, -92.7327386105613)
grid = prod(grid, 13, [15])
grid = magnitude(grid, 2, [15, 0, 14], 2)
grid = prod(grid, 2, [0, 1])
grid = smooth_min(grid, 10, 10, 0)
grid = power(grid, 12, 14, 0.15311324529261486)
grid = transit(grid, 1, [7, 6, 10, 13, 15, 3, 5, 0], [0.17662121794190266, 0.08052433410094585, 0.24028897664842197, 0.12013847564476617, 0.07880093772139096, 0.028428215371324846, 0.22560259031543914, 0.04959525225580831])
grid = smooth_max(grid, 7, 5, 13)
grid = magnitude(grid, 7, [13, 15, 1, 3, 6, 11, 4], 2)
grid = inverse(grid, 12, 7)
grid = sin(grid, 11, 4, 3.639967122867514, -93.25232115081823)
grid = transit(grid, 6, [4, 6, 15, 9, 1, 5, 3, 13, 2, 8], [0.026786860129860358, 0.11669543950887244, 0.18899826136984468, 0.1561593743428404, 0.21214890178462398, 0.0032322415512920128, 0.11780529129425855, 0.07068719121249566, 0.028013694139160984, 0.07947274466675097])
grid = sin(grid, 14, 14, 2.215524766553189, -87.96551270810866)
grid = transit(grid, 14, [14, 1, 2, 13], [0.0481687144675238, 0.19589986923400593, 0.45398843466717564, 0.3019429816312946])
grid = prod(grid, 0, [15, 8])
grid = transit(grid, 10, [13, 12, 1, 0, 15, 4, 9], [0.1348467046623781, 0.17044589597313262, 0.007342850565982377, 0.19789678520686874, 0.0940675105296504, 0.18412048892510044, 0.21127976413688732])
grid = transit(grid, 10, [2, 9, 5, 0, 14, 12, 1, 3, 13], [0.15564199158931152, 0.14582803947048112, 0.0008957976861989731, 0.1152454952632943, 0.09943207305711574, 0.18287730405477473, 0.00913893001260882, 0.07207484105842567, 0.218865527807789])
grid = magnitude(grid, 15, [3, 0, 2, 13, 6], 2)
grid = transit(grid, 1, [6, 9], [0.6099200010253524, 0.3900799989746476])
grid = magnitude(grid, 2, [15, 0, 6, 3, 8], 2)
grid = smooth_max(grid, 12, 0, 1)
grid = sin(grid, 7, 15, 0.995912265887857, -42.72193746278157)
grid = sin(grid, 11, 1, 6.730556665812658, 11.99275258901909)
grid = prod(grid, 1, [12])
grid = transit(grid, 6, [12, 11], [0.5943124150151232, 0.4056875849848768])
grid = transit(grid, 5, [4, 13], [0.9954188040576598, 0.004581195942340257])
grid = sin(grid, 2, 12, 0.06755576945439984, -33.27889049774262)
grid = transit(grid, 13, [9, 14, 6], [0.05762580370684737, 0.06539615096633812, 0.8769780453268146])
grid = transit(grid, 4, [12, 14, 9], [0.057473524463482584, 0.1816114235071543, 0.760915052029363])
grid = transit(grid, 11, [15, 1, 12, 6, 8, 3], [0.01730030878630351, 0.28262419300280045, 0.27552078196418794, 0.05545201033978391, 0.34057443950514193, 0.028528266401782323])
grid = transit(grid, 2, [13, 12, 6, 5], [0.06742478950343775, 0.09157173041702017, 0.22592916170606878, 0.6150743183734734])
grid = sin(grid, 5, 7, 0.899990639356419, -67.22532606663947)
grid = transit(grid, 11, [8, 15, 14, 4], [0.04384833051132965, 0.11258860613922468, 0.3589511099193461, 0.48461195343009955])
grid = transit(grid, 8, [12, 7, 8, 0, 1, 4], [0.06527062303145298, 0.23886184749184514, 0.11950142545937255, 0.1454854825076062, 0.04705358747881213, 0.38382703403091095])
grid = magnitude(grid, 6, [5], 2)
grid = transit(grid, 1, [12], [1.0])
grid = transit(grid, 13, [3, 4], [0.1386633127049261, 0.8613366872950738])
grid = sin(grid, 15, 6, 1.5112860228043752, 7.805984878306305)
grid = shift(grid, 0, 2, 4.6695496786727535)
grid = power(grid, 1, 2, 6.322252217914226)
grid = smooth_min(grid, 0, 9, 13)
grid = sin(grid, 7, 1, -2.6805374675529468, 66.08998525903917)
grid = transit(grid, 6, [13, 14, 12], [0.08382508029699674, 0.5253371028191618, 0.39083781688384134])
grid = power(grid, 1, 5, 0.5509283585660674)
grid = sin(grid, 6, 3, 0.4257741243882235, -78.4511925789604)
grid = sin(grid, 1, 15, -6.6236794165645705, 25.0799064162281)
grid = sin(grid, 0, 5, -0.9793141922393116, -0.25413130839717724)
grid = transit(grid, 11, [1, 3], [0.4607880974645301, 0.5392119025354699])
grid = transit(grid, 9, [8, 15, 12], [0.4114867284146482, 0.19071267395959135, 0.3978005976257605])
grid = shift(grid, 4, 14, -2.274191212393563)
grid = sin(grid, 12, 4, 2.245710751981959, -17.933388977683265)
grid = inverse(grid, 11, 7)
grid = smooth_max(grid, 12, 12, 14)
grid = magnitude(grid, 10, [10, 12, 5, 15, 2], 2)
grid = prod(grid, 2, [7, 1, 4])
grid = transit(grid, 6, [11, 10], [0.07051514782964032, 0.9294848521703598])
grid = transit(grid, 5, [1, 5, 6, 14, 3], [0.11205604818998932, 0.08386730810695489, 0.4071639642171069, 0.0015705752423438564, 0.395342104243605])
grid = sin(grid, 6, 8, -3.521191032420945, -85.69322219031608)
grid = sin(grid, 1, 5, -4.217683503855911, -27.29078656669786)
grid = sin(grid, 14, 4, -3.4077706520574096, -18.639948219156537)
grid = sin(grid, 2, 5, 0.7433438764027143, 62.47135549470258)
grid = sin(grid, 14, 0, 0.9816804555197611, 29.315522353634407)
grid = transit(grid, 3, [12, 0, 1, 8], [0.27182466622662327, 0.291055898922016, 0.0989179660060851, 0.33820146884527563])
grid = smooth_min(grid, 4, 13, 5)
grid = transit(grid, 5, [9, 11, 5, 12, 13, 2, 3], [0.20422918703666249, 0.15550454751307252, 0.0364658341041663, 0.04210549012795923, 0.3661057902920009, 0.15326974358384457, 0.042319407342293947])
grid = sin(grid, 0, 2, -2.437508892522133, 61.582745038997274)
grid = smooth_min(grid, 13, 0, 0)
grid = sin(grid, 2, 12, 2.925577493384024, -45.43639521989875)
grid = transit(grid, 5, [3, 9, 10, 6, 5], [0.3997724194252252, 0.2289130982509136, 0.006994254165943302, 0.16018532729200793, 0.20413490086591002])
grid = shift(grid, 8, 9, 5.472606415606266)
grid = transit(grid, 8, [10, 0, 5, 8, 11, 12, 2, 15, 14], [0.01864297895499834, 0.029385574497955702, 0.10509264795261554, 0.04561952641174259, 0.11213313423625489, 0.10446086722286875, 0.00325702113446219, 0.37372410301152353, 0.20768414657757858])
grid = sin(grid, 11, 3, 2.236984614777189, -9.406949686971885)
grid = sin(grid, 5, 5, 5.826905328776672, -95.0372602132718)
grid = smooth_max(grid, 3, 10, 12)
grid = power(grid, 7, 15, 0.592123043635334)
grid = transit(grid, 0, [10, 9, 4, 8, 2], [0.2454469210268065, 0.25308745235919194, 0.20097298922239554, 0.2968001399618873, 0.0036924974297186694])

#create color space 
def shift_colors(x, shift):
    res = x.copy()
    for i in range(x.shape[-1]):
        if shift[i] > 0: res[:,:,i] = (-np.abs(((x[:,:,i] + 1) / 2) ** (1 + shift[i]) - 1) ** (1 / (1 + shift[i])) + 1) * 2 - 1
        if shift[i] < 0: res[:,:,i] = np.abs((1 - (x [:,:,i]+ 1) / 2) ** (1 - shift[i]) - 1) ** (1 / (1 - shift[i])) * 2 - 1  
    return test_values(res) 

res = np.zeros((SIZE, SIZE, 3)) 
res += shift_colors(grid[:,:,0:1].repeat(3, -1), [1.2153247881717355, 0.7048120319236504, 0.04328930814125709]) 
res += shift_colors(grid[:,:,1:2].repeat(3, -1), [1.8068412865525474, 1.561304542108936, 1.3529768190139977]) 
res += shift_colors(grid[:,:,2:3].repeat(3, -1), [0.42739449246421524, 1.8199847366846467, 0.01605219702211569]) 

res = res / 3 
res = ((res + 1) / 2 * 255).clip(0,255) 

#save results 
im = Image.fromarray(np.uint8(res))
im.save(os.path.basename(__file__) + '.png')

#save layers
img = np.zeros((SIZE * 4, SIZE * 4))
for j in range(GRID_CHANNELS):
    x = j % 4
    y = j // 4
    img[x*SIZE:(x + 1)*SIZE, y*SIZE:(y+1)*SIZE] = grid[:,:,j]

img = (img + 1) * 127.5 
im = Image.fromarray(np.uint8(img))
im.save(os.path.basename(__file__) + '_layers.png')

